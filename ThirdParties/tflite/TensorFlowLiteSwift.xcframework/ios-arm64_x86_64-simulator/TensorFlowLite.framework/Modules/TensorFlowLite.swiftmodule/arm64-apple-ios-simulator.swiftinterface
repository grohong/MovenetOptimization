// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.8.1 (swiftlang-5.8.0.124.5 clang-1403.0.22.11.100)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TensorFlowLite
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Darwin
import Foundation
import Swift
@_exported import TensorFlowLite
import TensorFlowLiteC
import TensorFlowLiteCCoreML
import TensorFlowLiteCMetal
import _Concurrency
import _StringProcessing
final public class CoreMLDelegate : TensorFlowLite.Delegate {
  final public let options: TensorFlowLite.CoreMLDelegate.Options
  final public var cDelegate: TensorFlowLite.CoreMLDelegate.CDelegate {
    get
  }
  public init?(options: TensorFlowLite.CoreMLDelegate.Options = Options())
  @objc deinit
}
extension TensorFlowLite.CoreMLDelegate {
  public enum EnabledDevices : Swift.Equatable, Swift.Hashable {
    case neuralEngine
    case all
    public static func == (a: TensorFlowLite.CoreMLDelegate.EnabledDevices, b: TensorFlowLite.CoreMLDelegate.EnabledDevices) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var enabledDevices: TensorFlowLite.CoreMLDelegate.EnabledDevices
    public var coreMLVersion: Swift.Int
    public var maxDelegatedPartitions: Swift.Int
    public var minNodesPerPartition: Swift.Int
    public init()
    public static func == (a: TensorFlowLite.CoreMLDelegate.Options, b: TensorFlowLite.CoreMLDelegate.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public protocol Delegate : AnyObject {
  typealias CDelegate = Swift.UnsafeMutablePointer<TensorFlowLiteC.TfLiteDelegate>
  var cDelegate: Self.CDelegate { get }
}
@_hasMissingDesignatedInitializers final public class Interpreter {
  final public let options: TensorFlowLite.Interpreter.Options?
  final public let delegates: [any TensorFlowLite.Delegate]?
  final public var inputTensorCount: Swift.Int {
    get
  }
  final public var outputTensorCount: Swift.Int {
    get
  }
  final public var signatureKeys: [Swift.String] {
    get
  }
  convenience public init(modelPath: Swift.String, options: TensorFlowLite.Interpreter.Options? = nil, delegates: [any TensorFlowLite.Delegate]? = nil) throws
  convenience public init(modelData: Foundation.Data, options: TensorFlowLite.Interpreter.Options? = nil, delegates: [any TensorFlowLite.Delegate]? = nil) throws
  @objc deinit
  final public func invoke() throws
  final public func input(at index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func output(at index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func resizeInput(at index: Swift.Int, to shape: TensorFlowLite.Tensor.Shape) throws
  @discardableResult
  final public func copy(_ data: Foundation.Data, toInputAt index: Swift.Int) throws -> TensorFlowLite.Tensor
  final public func allocateTensors() throws
  final public func signatureRunner(with key: Swift.String) throws -> TensorFlowLite.SignatureRunner
}
extension TensorFlowLite.Interpreter {
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var threadCount: Swift.Int?
    public var isXNNPackEnabled: Swift.Bool
    public init()
    public static func == (a: TensorFlowLite.Interpreter.Options, b: TensorFlowLite.Interpreter.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "Interpreter.Options")
public typealias InterpreterOptions = TensorFlowLite.Interpreter.Options
public enum InterpreterError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorIndex(index: Swift.Int, maxIndex: Swift.Int)
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToLoadModel
  case failedToCreateInterpreter
  case failedToResizeInputTensor(index: Swift.Int)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case allocateTensorsRequired
  case invokeInterpreterRequired
  case tensorFlowLiteError(Swift.String)
  public static func == (a: TensorFlowLite.InterpreterError, b: TensorFlowLite.InterpreterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TensorFlowLite.InterpreterError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension TensorFlowLite.InterpreterError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
final public class MetalDelegate : TensorFlowLite.Delegate {
  final public let options: TensorFlowLite.MetalDelegate.Options
  final public var cDelegate: TensorFlowLite.MetalDelegate.CDelegate {
    get
  }
  public init(options: TensorFlowLite.MetalDelegate.Options = Options())
  @objc deinit
}
extension TensorFlowLite.MetalDelegate {
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var isPrecisionLossAllowed: Swift.Bool
    @available(*, deprecated, renamed: "isPrecisionLossAllowed", message: "Deprecated since TensorFlow Lite 2.4")
    public var allowsPrecisionLoss: Swift.Bool {
      get
      set(value)
    }
    public var waitType: TensorFlowLite.ThreadWaitType
    public var isQuantizationEnabled: Swift.Bool
    public init()
    public static func == (a: TensorFlowLite.MetalDelegate.Options, b: TensorFlowLite.MetalDelegate.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
public enum ThreadWaitType : Swift.Equatable, Swift.Hashable {
  case none
  case passive
  case active
  case aggressive
  public static func == (a: TensorFlowLite.ThreadWaitType, b: TensorFlowLite.ThreadWaitType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct QuantizationParameters : Swift.Equatable, Swift.Hashable {
  public let scale: Swift.Float
  public let zeroPoint: Swift.Int
  public static func == (a: TensorFlowLite.QuantizationParameters, b: TensorFlowLite.QuantizationParameters) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class SignatureRunner {
  final public let signatureKey: Swift.String
  final public var inputs: [Swift.String] {
    get
  }
  final public var outputs: [Swift.String] {
    get
  }
  @objc deinit
  final public func invoke(with inputs: [Swift.String : Foundation.Data]) throws
  final public func input(named name: Swift.String) throws -> TensorFlowLite.Tensor
  final public func output(named name: Swift.String) throws -> TensorFlowLite.Tensor
  final public func resizeInput(named name: Swift.String, toShape shape: TensorFlowLite.Tensor.Shape) throws
  final public func copy(_ data: Foundation.Data, toInputNamed name: Swift.String) throws
  final public func allocateTensors() throws
}
public enum SignatureRunnerError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToCreateSignatureRunner(signatureKey: Swift.String)
  case failedToGetTensor(tensorType: Swift.String, nameInSignature: Swift.String)
  case failedToResizeInputTensor(inputName: Swift.String)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case failedToInvokeSignature(signatureKey: Swift.String)
  case allocateTensorsRequired
  public static func == (a: TensorFlowLite.SignatureRunnerError, b: TensorFlowLite.SignatureRunnerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TensorFlowLite.SignatureRunnerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension TensorFlowLite.SignatureRunnerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct Tensor : Swift.Equatable, Swift.Hashable {
  public let name: Swift.String
  public let dataType: TensorFlowLite.Tensor.DataType
  public let shape: TensorFlowLite.Tensor.Shape
  public let data: Foundation.Data
  public let quantizationParameters: TensorFlowLite.QuantizationParameters?
  public static func == (a: TensorFlowLite.Tensor, b: TensorFlowLite.Tensor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension TensorFlowLite.Tensor {
  public enum DataType : Swift.Equatable, Swift.Hashable {
    case bool
    case uInt8
    case int16
    case int32
    case int64
    case float16
    case float32
    case float64
    public static func == (a: TensorFlowLite.Tensor.DataType, b: TensorFlowLite.Tensor.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TensorFlowLite.Tensor {
  public struct Shape : Swift.Equatable, Swift.Hashable {
    public let rank: Swift.Int
    public let dimensions: [Swift.Int]
    public init(_ dimensions: [Swift.Int])
    public init(_ elements: Swift.Int...)
    public static func == (a: TensorFlowLite.Tensor.Shape, b: TensorFlowLite.Tensor.Shape) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension TensorFlowLite.Tensor.Shape : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: Swift.Int...)
  public typealias ArrayLiteralElement = Swift.Int
}
public enum Runtime {
  public static var version: Swift.String {
    get
  }
}
